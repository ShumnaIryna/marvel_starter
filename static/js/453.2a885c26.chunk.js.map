{"version":3,"file":"static/js/453.2a885c26.chunk.js","mappings":"8OAkFA,EAxEmB,WAEf,OAAoCA,EAAAA,EAAAA,UAAS,IAAG,eAAzCC,EAAU,KAAEC,EAAa,KAChC,GAA4CF,EAAAA,EAAAA,WAAS,GAAM,eAApDG,EAAc,KAAEC,EAAiB,KACxC,GAA4BJ,EAAAA,EAAAA,UAAS,GAAE,eAAhCK,EAAM,KAAEC,EAAS,KACxB,GAAsCN,EAAAA,EAAAA,WAAS,GAAM,eAA9CO,EAAW,KAAEC,EAAc,KAElC,GAAuCC,EAAAA,EAAAA,KAAhCC,EAAO,EAAPA,QAASC,EAAK,EAALA,MAAOC,EAAY,EAAZA,cAEvBC,EAAAA,EAAAA,YAAU,WACNC,EAAUT,GAAQ,EACtB,GAAG,IAEH,IAAMS,EAAY,SAACT,EAAQU,GACbX,GAAVW,GACAH,EAAaP,GACRW,KAAKC,EACd,EAEMA,EAAqB,SAACC,GACxB,IAAIC,GAAQ,EACRD,EAAcE,OAAS,IACvBD,GAAQ,GAGZjB,EAAc,GAAD,eAAKD,IAAU,OAAKiB,KACjCd,GAAkB,GAClBE,EAAUD,EAAS,GACnBG,EAAeW,EACnB,EAsBA,IAAME,EApBN,SAAsBC,GAClB,IAAMD,EAAQC,EAAIC,KAAI,SAACC,EAAMC,GACzB,OACI,eAAIC,UAAU,eAAc,UACxB,UAAC,KAAI,CAACC,GAAE,kBAAaH,EAAKI,IAAK,WAC3B,gBAAKC,IAAKL,EAAKM,UAAWC,IAAKP,EAAKQ,MAAON,UAAU,sBACrD,gBAAKA,UAAU,oBAAmB,SAAEF,EAAKQ,SACzC,gBAAKN,UAAU,qBAAoB,SAAEF,EAAKS,YAJhBR,EAQ1C,IAEA,OACI,eAAIC,UAAU,eAAc,SACvBL,GAGb,CAEca,CAAYjC,GAEpBkC,EAAexB,GAAQ,SAACyB,EAAA,EAAY,IAAK,KACzCC,EAAU3B,IAAYP,GAAiB,SAACmC,EAAA,EAAO,IAAK,KAE1D,OACI,iBAAKZ,UAAU,eAAc,UACxBS,EACAE,EACAhB,GACD,mBACIkB,SAAUpC,EACVqC,MAAO,CAAC,QAAYjC,EAAc,OAAS,SAC3CmB,UAAU,mCACVe,QAAS,kBAAM3B,EAAUT,EAAO,EAAC,UACjC,gBAAKqB,UAAU,QAAO,SAAC,kBAIvC,E,UC1DA,EAjBmB,WAEf,OACI,iCACI,UAACgB,EAAA,EAAM,YACH,iBACIC,KAAK,cACLC,QAAQ,kCAEZ,2BAAO,oBAEX,SAACC,EAAA,EAAS,KACV,SAAC,EAAU,MAGvB,C,iFChBe,SAASC,EAAmBxB,GACzC,OCJa,SAA4BA,GACzC,GAAIyB,MAAMC,QAAQ1B,GAAM,OAAO,EAAA2B,EAAA,GAAiB3B,EAClD,CDES,CAAkBA,IELZ,SAA0B4B,GACvC,GAAsB,qBAAXC,QAAmD,MAAzBD,EAAKC,OAAOC,WAA2C,MAAtBF,EAAK,cAAuB,OAAOH,MAAMM,KAAKH,EACtH,CFGmC,CAAgB5B,KAAQ,EAAAgC,EAAA,GAA2BhC,IGLvE,WACb,MAAM,IAAIiC,UAAU,uIACtB,CHG8F,EAC9F,C","sources":["components/comicsList/ComicsList.js","components/pages/ComicsPage.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["import {useState, useEffect} from 'react';\nimport { Link } from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\n\nimport './comicsList.scss';\n\nconst ComicsList = () => {\n\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setnewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const {loading, error, getAllComics} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setnewItemLoading(false) : setnewItemLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n        //setComicsList(comicsList => [...comicsList, ...newComicsList]);\n        setComicsList([...comicsList, ...newComicsList]);\n        setnewItemLoading(false);\n        setOffset(offset + 8);\n        setComicsEnded(ended);\n    }\n\n    function renderItems (arr) {\n        const items = arr.map((item, i) => {\n            return (\n                <li className=\"comics__item\" key={i}>\n                    <Link to={`/comics/${item.id}`}>\n                        <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </Link>\n                </li>\n            )\n        })\n\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const items = renderItems(comicsList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"comics__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                disabled={newItemLoading} \n                style={{'display' : comicsEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import { Helmet } from \"react-helmet\";\r\n\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\nconst ComicsPage = () => {\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Page with list of our comics\"\r\n                />\r\n                <title>Comics page</title>\r\n            </Helmet>\r\n            <AppBanner/>\r\n            <ComicsList/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["useState","comicsList","setComicsList","newItemLoading","setnewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","useMarvelService","loading","error","getAllComics","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","items","arr","map","item","i","className","to","id","src","thumbnail","alt","title","price","renderItems","errorMessage","ErrorMessage","spinner","Spinner","disabled","style","onClick","Helmet","name","content","AppBanner","_toConsumableArray","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError"],"sourceRoot":""}