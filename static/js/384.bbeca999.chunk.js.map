{"version":3,"file":"static/js/384.bbeca999.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/errorBoundary.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useState, useEffect} from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n    \n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n        getCharacter(id)\n            .then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n             </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef} from 'react';\nimport PropTypes from 'prop-types';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n\n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        // Я реализовал вариант чуть сложнее, и с классом и с фокусом\n        // Но в теории можно оставить только фокус, и его в стилях использовать вместо класса\n        // На самом деле, решение с css-классом можно сделать, вынеся персонажа\n        // в отдельный компонент. Но кода будет больше, появится новое состояние\n        // и не факт, что мы выиграем по оптимизации за счет бОльшего кол-ва элементов\n\n        // По возможности, не злоупотребляйте рефами, только в крайних случаях\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n\n    // Этот метод создан для оптимизации, \n    // чтобы не помещать такую конструкцию в метод render\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li \n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        key={item.id}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                            }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n\n         // And this design is made to center the spinner / error\n         return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n        \n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\nimport './charInfo.scss';\n\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) { // if not found id\n            return;\n        }\n\n        clearError();\n        getCharacter(charId) //if found id we give a request\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => { \n            setChar(char);\n    }\n\n    const skeleton = char || loading || error ? null : <Skeleton/>;\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n         <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n    \n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                             </li>\n                        )\n                    })\n                }  \n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n    <div className=\"char__search-form\">\r\n        <Formik\r\n            initialValues = {{\r\n                charName: ''\r\n            }}\r\n            validationSchema = {Yup.object({\r\n                charName: Yup.string().required('This field is required')\r\n            })} \r\n            onSubmit = { ({charName}) => {\r\n                updateChar(charName);\r\n            }}>\r\n            <Form>\r\n                <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                <div className=\"char__search-wrapper\">\r\n                    <Field\r\n                        id=\"charName\" \r\n                        name='charName' \r\n                        type='text' \r\n                        placeholder=\"Enter name\"/>\r\n                    <button\r\n                        type='submit' \r\n                        className=\"button button__main\"\r\n                        disabled={loading}>\r\n                        <div className=\"inner\">find</div>\r\n                    </button>\r\n            </div>\r\n            <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\"/>\r\n            </Form>\r\n        </Formik>\r\n        {results}\r\n        {errorMessage}\r\n    </div>\r\n    )\r\n}\r\nexport default CharSearchForm;\r\n","import { Component } from \"react\"; \r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from \"react\";\r\nimport {Helmet} from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\nimport ErrorBoundary from \"../errorBoundary/errorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, stateChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        stateChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary> \r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary> \r\n                    </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, request, error, clearError } = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _apiKey = \"apikey=e903894ed8a81208c651a44e1236bfaf\";\r\n\r\n  //the key below is not mine, but from the courses\r\n  //const _apiKey = \"apikey=c5d6fc8b83116d92ed468ce36bac6c62\";\r\n  const _baseOffset = 210;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(\r\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}/characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    console.count(\"test\");\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(\r\n      `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : \"There is no description for this character\",\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || \"There is no description\",\r\n      pageCount: comics.pageCount\r\n        ? `${comics.pageCount} p.`\r\n        : \"No information about the number of pages\",\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      language: comics.textObjects[0]?.language || \"en-us\",\r\n      // optional chaining operator\r\n      price: comics.prices[0].price\r\n        ? `${comics.prices[0].price}$`\r\n        : \"not available\",\r\n    };\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    clearError,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    getAllComics,\r\n    getComic,\r\n    getCharacterByName,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n            \r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}\r\n    //[]-empty dependency array"],"names":["style","display","width","height","objectFit","margin","src","img","alt","View","char","name","description","thumbnail","homepage","wiki","imgStyle","className","href","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","comics","charId","skeleton","getCharacterByName","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","selectedChar","stateChar","Helmet","decoration","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","_baseOffset","res","_transformCharacter","count","getAllComics","_transformComics","getComic","slice","path","extension","urls","title","pageCount","language","textObjects","price","prices"],"sourceRoot":""}